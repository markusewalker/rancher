// Code generated by MockGen. DO NOT EDIT.
// Source: tokens.go
//
// Generated by this command:
//
//	mockgen -source tokens.go -destination=zz_token_fakes.go -package=tokens
//

// Package tokens is a generated GoMock package.
package tokens

import (
	reflect "reflect"

	v1 "github.com/rancher/rancher/pkg/apis/ext.cattle.io/v1"
	ext "github.com/rancher/steve/pkg/ext"
	gomock "go.uber.org/mock/gomock"
)

// MocksupportActionHandler is a mock of supportActionHandler interface.
type MocksupportActionHandler struct {
	ctrl     *gomock.Controller
	recorder *MocksupportActionHandlerMockRecorder
}

// MocksupportActionHandlerMockRecorder is the mock recorder for MocksupportActionHandler.
type MocksupportActionHandlerMockRecorder struct {
	mock *MocksupportActionHandler
}

// NewMocksupportActionHandler creates a new mock instance.
func NewMocksupportActionHandler(ctrl *gomock.Controller) *MocksupportActionHandler {
	mock := &MocksupportActionHandler{ctrl: ctrl}
	mock.recorder = &MocksupportActionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksupportActionHandler) EXPECT() *MocksupportActionHandlerMockRecorder {
	return m.recorder
}

// MakeAndHashSecret mocks base method.
func (m *MocksupportActionHandler) MakeAndHashSecret() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAndHashSecret")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeAndHashSecret indicates an expected call of MakeAndHashSecret.
func (mr *MocksupportActionHandlerMockRecorder) MakeAndHashSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAndHashSecret", reflect.TypeOf((*MocksupportActionHandler)(nil).MakeAndHashSecret))
}

// Now mocks base method.
func (m *MocksupportActionHandler) Now() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(string)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MocksupportActionHandlerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MocksupportActionHandler)(nil).Now))
}

// UserHasManageTokenPermissions mocks base method.
func (m *MocksupportActionHandler) UserHasManageTokenPermissions(ctx ext.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasManageTokenPermissions", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasManageTokenPermissions indicates an expected call of UserHasManageTokenPermissions.
func (mr *MocksupportActionHandlerMockRecorder) UserHasManageTokenPermissions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasManageTokenPermissions", reflect.TypeOf((*MocksupportActionHandler)(nil).UserHasManageTokenPermissions), ctx)
}

// UserHasPermission mocks base method.
func (m *MocksupportActionHandler) UserHasPermission(verb string, token *v1.Token, ctx ext.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasPermission", verb, token, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasPermission indicates an expected call of UserHasPermission.
func (mr *MocksupportActionHandlerMockRecorder) UserHasPermission(verb, token, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasPermission", reflect.TypeOf((*MocksupportActionHandler)(nil).UserHasPermission), verb, token, ctx)
}
